Project description
Cybr is a turnbased game made in C++ with SFML 2.4.2. The purpose of this project is to explore more advanced programming 
techniques as well as implementing interesting algorithms in a purposeful way.

Project files
main.cpp
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[AI]
Functionality for NPCs and indirect player movement.

Pathfinder.h/cpp - Deals with the movement from point A to point B that the player cant actively influence.
NpcManager.h/cpp - The AI for all NPCs. Consists of everything from combat to mundane behind-the-scenes code.
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[CLI]
Commands and such for testing purposes in the CLI (Command Line Interface).
*Eventually want to leave the Windows console and run a custom CLI from within the game.
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[ENTITY]
Every interactable object is an entity. Items, characters, weapons, etc.

Unit.h/cpp          - Base for all entities as a lot of data is shared between classes.
UnitContainer.h/cpp - The player(s). Contains information such as; action points, health, inventory.
Item.h/cpp          - An item can be a health-pack, armor-pack, weapon, etc. This is the base-class for such objects.
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[GAMESTATE]
The game is divided into several "states".

Game.h/cpp - Container for all the GameStates. Handles push/pop.
GameState.h - The base for all gamestates. Contains only virtual functions for update, draw and input. The other states inherit 
from this base class.
GameStateStart.h/cpp - Main menu/splashscreen. Only basic user-selections for start/exit.
GameStatePlay.h/cpp - The state in which the actual game is being run. Upon launching this, the gamearea is generated along with 
entities.
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[GENERATION]
Each gamestart the game area is randomly generated and entities placed throughout with an Binary Space Partition-based 
algorithm.

TilemapGenerator.h/cpp - Generates the game area by dividing it into several nodes according to BSP.
Tilemap.h/cpp - Tiles generated by TilemapGenerator are stored and managed in the Tilemap class.
Tile.h/cpp - Each node is a collection of tiles. Walls, doors, floors; these are all tiles. What type of tiles are placed in the 
game area is decided by the TilemapGenerator 
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[GRAPHICS]
Textures for the assortment entities/tiles has to be stored properly and functions for retrieval must be in place.

*TextureHandler.h/cpp - Contains functions for handling textures. Such as storing/retrieving/deleting.
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
[NETWORK]
Used for running a game session over TCP/IP or LAN.

*NetEngine - Basic netcode running TCP-protocol.
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

* : features dependent on time left after engine and basic gameplay has been completed.
