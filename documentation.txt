<--->: 171117_1
<desc>
Created Cybr Github.
Created Cybr_Project (SFML 2.4.2).
Theorycraft BSP generation. Game matrix start with a basic node (width, height) and a maximum depth(how many times it can split). Node derives from struct BSPNode. From there the splitNode(params) func splits either horizontally or vertically. Depending on split direction, the basic node is divided into two subnodes (A, B) and their properties are set. If the maximum has yet to be reached, the func will run recursively until it has.
Img of theorycraft sesh (contains possible errors):
https://cdn.discordapp.com/attachments/381074775633690635/381075003652833282/20171110_072232.jpg
</>

<files>
main.cpp
[GENERATION]
TilemapGenerator.h/cpp: contains struct BSPNode/code for generation.
Tile.h/cpp: empty
</>

<time>
12 h
</>

<todo>
Atm there's no way to actually test the splitNode func, so for now we leave it as is and continue with the gamestates.
</--->

<--->: 171118_1
<desc>
Implemented the required gamestates. GameStateStart which is the startmenu/splashscreen and GameStatePlay which the game is run from. Both of these classes derives from the base-class GameState. A Game has also been created to handle push/pop between the gamestates, as well as containing the main game-loop.
</>

<files>
Game.h/cpp
GameState.h/
GameStateStart.h/cpp
GameStatePlay.h/cpp
</>

<time>
4 h
</>

<todo>
Tiles should be prioritized now that there's a gamestate to work from.
</>
</--->

<--->: 171118_2
<desc>
Finished up the Tile class and created another, Tilemap, which serves as a container-class for the afformentioned Tiles.
We can now fill the gamearea with Tiles, but whether or not the BSP algorithm works remains to be seen.
</>

<files>
Tile.h/cpp
Tilemap.h/cpp
</>

<time>
3 h
</>

<todo>
Instead of designing a small subset of functions to test the TilemapGenerator against the console I'm moving on to creating some characters.
A system for CLI commands is already on the roadmap but since there's no urgent demand for this level of testing I'm saving it for when the project reaches a larger scale and it becomes a necessity.
</>
</--->

<--->: 171119_1
<desc>
For characters (henceforth refered to as "Units") I created 4 classes; Unit (base), PlayerUnit, NpcUnit and finally UnitContainer for storing the entities. I was planning on having PlayerUnit/NpcUnit derive from Unit and storing the objects in a Linked List data structure, however after reading up on some specifications I decided that the simplified storage does not outweigh its inefficiency and as such opted to just use vector.
At the same time I found no real reason to base the PlayerUnit and NpcUnit on heritage as they are near - if not - perfectly identical, and as such have been dropped.
</>

<files>
Unit.h/cpp
* NpcUnit.h/cpp
* PlayerUnit.h/cpp
UnitContainer.h/cpp
</>

<time>
4 h (excluding research)
</>

<todo>
Intense memory leaks has been observed in Tile. Quick examination points to Tilemap as the root cause. Top priority!
</>
* moved to [OLD]
</--->

<--->: 171119_2
<desc>

</>

<file>

</>

<time>

</>

<todo>

</>
</--->

